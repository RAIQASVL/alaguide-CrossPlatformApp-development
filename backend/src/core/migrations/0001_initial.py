# Generated by Django 5.1 on 2024-08-12 18:56

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="AlaguideObject",
            fields=[
                ("ala_object_id", models.AutoField(primary_key=True, serialize=False)),
                ("author", models.CharField(max_length=100)),
                ("guide", models.CharField(max_length=100)),
                (
                    "description",
                    models.TextField(max_length=1000, null=True, blank=True),
                ),
                (
                    "image_url",
                    models.FileField(blank=True, null=True, upload_to="landmarks"),
                ),
            ],
            options={
                "db_table": "AlaguideObjects",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AudioBook",
            fields=[
                (
                    "audiobook_id",
                    models.AutoField(default=None, primary_key=True, serialize=False),
                ),
                ("title", models.CharField(max_length=255, unique=True)),
                ("author", models.CharField(max_length=100)),
                ("guide", models.CharField(max_length=100)),
                ("audio_url", models.FileField(unique=True, upload_to="audio")),
            ],
            options={
                "db_table": "AudioBooks",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "category_id",
                    models.AutoField(default=None, primary_key=True, serialize=False),
                ),
                ("category", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "db_table": "LandmarksCategory",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="City",
            fields=[
                (
                    "city_id",
                    models.AutoField(default=None, primary_key=True, serialize=False),
                ),
                ("city", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField()),
                (
                    "latitude",
                    models.DecimalField(decimal_places=6, max_digits=9, null=True),
                ),
                (
                    "longitude",
                    models.DecimalField(decimal_places=6, max_digits=9, null=True),
                ),
            ],
            options={
                "db_table": "Cities",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Country",
            fields=[
                (
                    "country_id",
                    models.AutoField(default=None, primary_key=True, serialize=False),
                ),
                ("country", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "db_table": "Countries",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Landmark",
            fields=[
                (
                    "landmark_id",
                    models.AutoField(default=None, primary_key=True, serialize=False),
                ),
                ("landmark", models.CharField(max_length=255, unique=True)),
                (
                    "latitude",
                    models.DecimalField(
                        decimal_places=6, max_digits=9, null=True, unique=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        decimal_places=6, max_digits=9, null=True, unique=True
                    ),
                ),
            ],
            options={
                "db_table": "Landmarks",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                ("user_id", models.AutoField(primary_key=True, serialize=False)),
                ("username", models.CharField(max_length=150, unique=True)),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                (
                    "email",
                    models.EmailField(
                        max_length=100, unique=True, verbose_name="Email Address"
                    ),
                ),
                ("email_is_verified", models.BooleanField(default=False)),
                ("password", models.CharField(max_length=128)),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                ("birth_date", models.DateField(blank=True, null=True)),
                ("default_country_id", models.IntegerField(default=1, null=True)),
                ("default_city_id", models.IntegerField(default=1, null=True)),
                (
                    "preferred_language",
                    models.CharField(default="en", max_length=10, null=True),
                ),
                ("is_staff", models.BooleanField(default=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_superuser", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "Users",
                "managed": True,
            },
        ),
    ]
